@using Services.Metrics.Models;
@inject Services.Metrics.Poller poller

@if ( triples == null ) {
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
} else {
    var total_count = 0;
    var min_count = 10000;
    <div class="row">    
        <div class="col">
            <label>Triples</label>
        </div>

    @for (int i = 0; i < triples.Count; i++) {         
        total_count += triples[i].total_count;
        if (triples[i].total_count < min_count) {
            min_count = triples[i].total_count;
        }
        <div class="col">
            @triples[i].name:
            <label class="text@( triples[i].total_count < 5  ? "-danger" : triples[i].total_count < 10 ?  "-warning" : triples[i].total_count < 15 ?  "-info" :  "-success") ">
                 @triples[i].total_count 
            </label>
        </div>        
    }
        <div class="col">
            Total:
            <label class="text@( min_count < 5  ? "-danger" : min_count < 10 ?  "-warning" : min_count < 15 ?  "-info" :  "-success") ">
                @total_count
            </label>
        </div>
    </div>


@code {
    public List<NodeTripleCount>? triples { get; set; }
    PeriodicTimer periodicTimer = new (TimeSpan.FromMilliseconds(500));
    protected override Task OnInitializedAsync() {        
       RunTimer();
   
       return base.OnInitializedAsync();
    }
    public void Dispose()
    {        
        periodicTimer.Dispose();
    }
    async void RunTimer()
    {  
        while (await periodicTimer.WaitForNextTickAsync()) { 
            if (poller.history == null) {
                continue;
            }

            @* timing_metrics = poller.history.get_timing_metrics(); *@
            triples = poller.history.get_active_triples();
            StateHasChanged();           
        }    
    }
}
   
}
      
