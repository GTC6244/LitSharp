@page "/config/validators"
@using Radzen.Blazor.Rendering;
@using SharedService;
@using Services.Metrics.Models;
@using System.Numerics;
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>Validators</PageTitle>
<h2>Validators</h2>    
<NodeView.Components.MinimalHeader />
<br />
<NodeView.Components.Config.Validator name="Current Nodes" validators="@current_validators" />
<br />
<NodeView.Components.Config.Validator name="Next Nodes" validators="@next_validators" />

<br/><br/>
<p>Total Staked: @total_staked</p>

@code {
    private List<Validator> ? current_validators = null;
    private List<Validator> ? next_validators = null;
    private BigInteger total_staked = 0;
    protected override async Task OnInitializedAsync()
    {                
        var resolver = new Resolver(localStorage);
        var stakingService = await resolver.GetStakingService();

        var v = await stakingService.GetValidatorsStructsInCurrentEpochQueryAsync();
        current_validators = v.ReturnValue1.Select(x => new Validator()
        {
            Ip = x.Ip,
            Port = x.Port,
            NodeAddress = x.NodeAddress,
            Reward = x.Reward,
            SenderPubKey = x.SenderPubKey,
            ReceiverPubKey = x.ReceiverPubKey
        }).ToList();
        var v2 = await stakingService.GetValidatorsStructsInNextEpochQueryAsync();
        next_validators = v2.ReturnValue1.Select(x => new Validator()
        {
            Ip = x.Ip,
            Port = x.Port,
            NodeAddress = x.NodeAddress,
            Reward = x.Reward,
            SenderPubKey = x.SenderPubKey,
            ReceiverPubKey = x.ReceiverPubKey
        }).ToList();

        var stakingBalance = await resolver.GetStakingBalancesService();

        total_staked = await stakingBalance.TotalStakedQueryAsync();

        
    }
}