@page "/explorer/history"
@using Radzen.Blazor.Rendering;
@using SharedService;
@using System.Numerics;
@using LitContracts.Staking;
@using Nethereum.Contracts.Extensions;
@using Services.Metrics.Models;
@using System.Text.Json;
@using Nethereum.Util;
@using Org.BouncyCastle.Crypto.Digests;
@using Nethereum.Web3;
@using Nethereum.ABI.Model;
@using Nethereum.Contracts;
@using Nethereum.Web3.Accounts;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;

<PageTitle>LNE - Staking History</PageTitle>
<h2>Chain Based Network History</h2>    

<br />

<div class="row">

<div class="col-9">

      <div class="card border-primary">
        <div class="card-header  ">
          <div class="row no-gutters">
            <div class="col">
              Chain History for Network
              </div>
          </div>
        </div>
        <div class="card-body p-0">
          <div class="row">
            <div class="col"> 
              <RadzenDataGrid AllowFiltering="false" AllowColumnResize="true"   AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="false" PageSize="30" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                  Data="@entries" TItem="BlockEntry" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single">
                  <Columns>       
                      <RadzenDataGridColumn TItem="BlockEntry" Title="Block / Time" Width="15%" >
                          <Template Context="data">
                              @data.blockNumber <br/>
                              @data.chainTimeStamp
                          </Template>
                      
                      </RadzenDataGridColumn>
                      <RadzenDataGridColumn TItem="BlockEntry" Property="input" Title="Description" Width="60%" >
                          <Template Context="data">
                              @{
                                  var (name, description) = get_description(data.input, data.isError);
                                  if (data.isError == "1") {
                                    <div class="text-danger">@name</div>
                                  }
                                  else {
                                    <div class="text-success">@name</div>
                                  }
                              }
                              @(new MarkupString(description.Replace("\n", "<br/>"))) 
                          </Template>
                      </RadzenDataGridColumn>  
                      <RadzenDataGridColumn TItem="BlockEntry" Property="from"  Title="From" Width="25%" />                
                  </Columns>
              </RadzenDataGrid>  
            </div>
          </div>
        </div>
      </div>  

  </div>


  <div class="col">

    <div class="card border-primary">
      <div class="card-header  ">
        <div class="row no-gutters">
          <div class="col">
            <b>Network State (Historic)</b><br /><br />
            </div>
        </div>
        <div class="row no-gutters">
          <div class="col">
            
            <div class="row">
              <div class="col-6">
                  State:    
                  @network_state  
              </div>
              <div class="col-3">
                  Epoch:
                  @epoch_number  
              </div>
              <div class="col-3">
                  Block:
                  @block_number  
              </div>
            </div>

          </div>
        </div>
      </div>
      <div class="card-body p-0">
          <RadzenDataGrid AllowFiltering="false" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="false" PageSize="30" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
              Data="@validators" TItem="Services.Metrics.Models.Validator" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
              <Columns>       
                  <RadzenDataGridColumn TItem="Services.Metrics.Models.Validator" Title="Nodes" Width="100%" >
                      <Template Context="data">
                          <a href="@(data.NodeSocketAddress + "/connect")" style="text-decoration:none" target="_blank">@data.NodeSocketAddress</a>                        <br/>
                          <a href="@("https://lit-protocol.calderaexplorer.xyz/address/"  +data.NodeAddress)" style="text-decoration:none" target="_blank" >@data.NodeAddress</a>                        
                      </Template>
                  </RadzenDataGridColumn>    
              </Columns>
          </RadzenDataGrid>  
      </div>
    </div>  



  </div>


  
</div>






@code {
    private List<Services.Metrics.Models.Validator> validators { get; set; }
    private string network_state { get; set; }
    private string epoch_number { get; set; }
    private string block_number { get; set; }

    private List<BlockEntry> entries { get; set; }

    public class BlockEntry
    {
        public string blockHash { get; set; }
        public string blockNumber { get; set; }
        public string confirmations { get; set; }
        public string contractAddress { get; set; }
        public string cumulativeGasUsed { get; set; }
        public string from { get; set; }
        public string gas { get; set; }
        public string gasPrice { get; set; }
        public string gasUsed { get; set; }
        public string hash { get; set; }
        public string input { get; set; }
        public string isError { get; set; }
        public string nonce { get; set; }
        public string timeStamp { get; set; }
        public string to { get; set; }
        public string transactionIndex { get; set; }
        public string txreceipt_status { get; set; }
        public string value { get; set; }

        public DateTime chainTimeStamp { get { DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
                                dateTime = dateTime.AddSeconds( Double.Parse(timeStamp) ).ToLocalTime();
                                return dateTime; }
                                }
        
    }

    public class CalderaChainResponse

    {
        public string message { get; set; }
        public List<BlockEntry> result { get; set; }
        public string status { get; set; }
    }

    private StakingService? stakingService = null;

   private Nethereum.Contracts.ContractBuilder? contractBuilder = null;

    private (string, string) get_description(String input , string? isError) {
        
        var function_input = input.Substring(0,10);
        if (this.contractBuilder != null) {

          System.Text.StringBuilder sb = new System.Text.StringBuilder();
          try {

                Nethereum.ABI.Model.FunctionABI function = contractBuilder.GetFunctionAbiBySignature(function_input);
                List<Nethereum.ABI.FunctionEncoding.ParameterOutput> data =  function.DecodeInputDataToDefault(input);        
        
              foreach (var item in data)
              {
                  @* Console.WriteLine(item.Parameter.Name + " " + item.Result); *@
                  sb.Append(item.Parameter.Name + ":" + item.Result + System.Environment.NewLine);
              } 
            


              return (function.Name, sb.ToString());
            
          }
          catch (Exception ex) {
            Console.WriteLine(ex.Message);
            return ("","");
          }
        }
        return ("","");
    }

    protected override async Task OnInitializedAsync()
    {
        
        var resolver = new Resolver(localStorage);
        stakingService = await resolver.GetStakingService();
        contractBuilder = LitContracts.RawABI.get_staking_contract_abi(stakingService.ContractHandler.ContractAddress);       
        await LoadHistory();
    }


    private async Task LoadHistory()
    {      
        //var address = "0x4B90EB9BfCc55DcdBdd1A9FE77627397da7d43e1";
        var address = stakingService.ContractHandler.ContractAddress;
        var client = new HttpClient();
        // query the url
        var response = await client.GetAsync("https://lit-protocol.calderaexplorer.xyz/api?module=account&action=txlist&sort=asc&address=" + address);
        // parse the response
        var responseString = await response.Content.ReadAsStringAsync();
        var queryResponse = JsonSerializer.Deserialize<CalderaChainResponse>(responseString);
        entries = queryResponse.result;
    }
} 