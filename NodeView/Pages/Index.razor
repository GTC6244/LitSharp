@page "/"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Services.Metrics.Poller poller
<PageTitle>Index</PageTitle>

<h2>Developer Node Explorer</h2>    
<p>
    <br>
<b>Notes:</b>
</p>
<li>
    This tool is runs entirely in the browser and requires only a the resolver contract address (or staker contract address) and access to the base chain in order to self configure.    
</li>
    <li> a private key is required for transactions that require funds - in the default scenario, this is the first key from the Anvil/HardHat node list</li>
<li>
    To view node information, the nodes must support metrics collection.   The other exploration functions will continue to work, however.
</li>
<li>
    This tool was written in C# using Blazor technology and the Nethereum library - a web3 or ethers equivalent for C#.
</li>
<li>
    Source code is available at <a href="https://github.com/GTC6244/LitSharp/">LitSharp</a>
</li>

<p></p>
<p>
The default settings are to use the local Anvil configuration, wtih a deterministic address for the resolver contract.  
</p>

<p>
    <br>
    <b>
    Configuration
</b></p>

<div class="form-group">
    <label for="chainId">Chain url:</label>
    <input type="text" id="chainUrl" class="form-control" name="chainId" value="@chainUrl" @onchange="ChainUrlChanged" />
</div>
<div class="form-group">
    <label for="resolverAddress">Resolver Contract Address:</label>
    <input type="text" id="resolverAddress" class="form-control" name="resolverAddress" value="@resolverAddress" @onchange="ResolverAddressChanged" />
</div>
<div class="form-group">
    <label for="privateKey">Private Key:</label>
    <input type="text" id="privateKey" class="form-control" name="privateKey" value="@defaultPrivateKey" />
</div>

<p>
    <br>
    <b>
    Poller Service
</b></p>
<div class="form-group">
    <button type="button" class="btn btn-primary" @onclick="() => poller.StartAsync()">Start Polling</button>
</div>


@code {
    string? chainUrl;
    string? resolverAddress;
    string? defaultPrivateKey;

    protected override async Task OnInitializedAsync()
    {
        chainUrl = await localStorage.GetItemAsync<string>("url");
        if ( string.IsNullOrEmpty( chainUrl ) ) chainUrl = "https://127.0.0.1:8545";
        resolverAddress = await localStorage.GetItemAsync<string>("contractResolverAddress");
        if ( string.IsNullOrEmpty( resolverAddress ) ) resolverAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
        defaultPrivateKey = await localStorage.GetItemAsync<string>("privateKey");
        if ( string.IsNullOrEmpty( defaultPrivateKey ) ) defaultPrivateKey = "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80";
            
    }

    async void ResolverAddressChanged(ChangeEventArgs e)
    {

        if ( e.Value == null ) return;
        if ( string.IsNullOrEmpty( e.Value.ToString() ) ) return;

        resolverAddress =  e.Value.ToString();
        await localStorage.SetItemAsync("contractResolverAddress", resolverAddress);
    }

    async void ChainUrlChanged(ChangeEventArgs e)
    {
        if ( e.Value == null ) return;
        if ( string.IsNullOrEmpty( e.Value.ToString() ) ) return;

        chainUrl = e.Value.ToString();
        await localStorage.SetItemAsync("url", chainUrl);
    }

    async void PrivateKeyChanged(ChangeEventArgs e)
    {

        if ( e.Value == null ) return;
        if ( string.IsNullOrEmpty( e.Value.ToString() ) ) return;

        defaultPrivateKey = e.Value.ToString();
        await localStorage.SetItemAsync("privateKey", defaultPrivateKey);
    }
}