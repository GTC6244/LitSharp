@namespace NodeView.Pages 
@page "/nodes/networkview"
@inject Poller poller
@inject HttpClient Http
@using Blazor.Diagrams.Components;
@using Blazor.Diagrams;
@using Blazor.Diagrams.Core.PathGenerators;
@using Blazor.Diagrams.Core.Routers;
@using Blazor.Diagrams.Options;
@using Blazor.Diagrams.Core.Models;   
@using Blazor.Diagrams.Core.Geometry;
@using Blazor.Diagrams.Core.Models.Base;
@using Blazor.Diagrams.Components.Widgets;
@using System.Net.Http.Json
@using Services.Metrics;
@using Services.Metrics.Models;
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>Network Viewer</PageTitle>
<h2>Network Viewer</h2>
<NodeView.Components.Header />

@if ( poller.history == null)
{
    <p><em>Loading Network Information...</em></p>
}
else
{
    <div style="height: @diagram_height_string;" class="card border-primary">
        <CascadingValue Value="diagram" IsFixed="true">            
            <DiagramCanvas></DiagramCanvas> 
        </CascadingValue>
    </div>
}

@code {
    private int diagram_height = 800;
    private string diagram_height_string = "100px";
    private BlazorDiagram? diagram { get; set; } 
    private List<OutMessages>? out_messages { get; set; }
    PeriodicTimer periodicTimer = new (TimeSpan.FromMilliseconds(500));
    protected override Task OnInitializedAsync() {               
       diagram_height_string = diagram_height.ToString() + "px";
       Init_Diagram();
       RunTimer();
       return base.OnInitializedAsync();
    }
    public void Dispose()
    {        
        periodicTimer.Dispose();
    }

    protected bool Init_Diagram() {                
        Console.WriteLine("Init_Diagram");
        var options = new BlazorDiagramOptions
        {
            AllowMultiSelection = true,
            Zoom =
            {
                Enabled = false,
            },
            Links =
            { 
                DefaultRouter = new NormalRouter(),
                DefaultPathGenerator = new SmoothPathGenerator()
            }, 
        };
        diagram = new BlazorDiagram(options);
        return true;
    }

    protected bool Set_Diagram_Nodes()
    {                
        Console.WriteLine("Init_Diagram"    );
        if (poller.nodes == null) {
            return false;
        }

        if (diagram == null) {
            return false;
        }

        Console.WriteLine("Node count: " + poller.nodes.Length.ToString() );

        var center_point = new Blazor.Diagrams.Core.Geometry.Point(450, diagram_height / 2 - 20);
        var node_count = poller.nodes.Length;
        var positions = GetCirclePoints(node_count, 380, center_point);

        for (int i = 0; i < node_count; i++)
        {
            var node = diagram.Nodes.Add(new NodeModel(id: i.ToString(), position: positions[i])
            {
                Title = "Node " + poller.nodes[i].Port.ToString(),
            });
        }

        for (int i = 0; i < node_count; i++)
        {
            for (int j = i; j < node_count; j++)
            {
                if (i == j)
                    continue;

                var link_id = i.ToString() + "-" + j.ToString();
                var link = diagram.Links.Add(new LinkModel( link_id , diagram.Nodes[i], diagram.Nodes[j]));                                 
                link.PathGenerator = new SmoothPathGenerator();
                link.TargetMarker = LinkMarker.Arrow;
                link.Width = 5;

                var link_id2 = j.ToString() + "-" + i.ToString();
                var targetAnchor = new Blazor.Diagrams.Core.Anchors.LinkAnchor(link, 20, 10,10);
                var sourceAnchor = new Blazor.Diagrams.Core.Anchors.ShapeIntersectionAnchor(diagram.Nodes[j]  );
                var link2 = diagram.Links.Add(new LinkModel(link_id2, diagram.Nodes[j], diagram.Nodes[i]));                                 
                link2.PathGenerator = new SmoothPathGenerator();                
                link2.TargetMarker = LinkMarker.Arrow;
                link2.Width = 3;
                
                var x = (diagram.Nodes[j].Position.X + diagram.Nodes[i].Position.X) / 2;
                var y = (diagram.Nodes[j].Position.Y + diagram.Nodes[i].Position.Y) / 2;
                var point = new Blazor.Diagrams.Core.Geometry.Point(x, y);
                
                var length = Math.Sqrt(Math.Pow(diagram.Nodes[j].Position.X - diagram.Nodes[i].Position.X, 2) + Math.Pow(diagram.Nodes[j].Position.Y - diagram.Nodes[i].Position.Y, 2)   );
                var offset_length = 20; //length / 10;
                var offset_x = (diagram.Nodes[j].Position.X - diagram.Nodes[i].Position.X) / length * offset_length;
                var offset_y = (diagram.Nodes[j].Position.Y - diagram.Nodes[i].Position.Y) / length * offset_length;

                var inner_point = new Blazor.Diagrams.Core.Geometry.Point(x - offset_y, y + offset_x);
                var vertex1 = link.AddVertex( inner_point );

                var outer_point = new Blazor.Diagrams.Core.Geometry.Point(x + offset_y, y - offset_x);
                var vertex2 = link2.AddVertex( outer_point );
            }
        } 

        Console.WriteLine("Done");
        return true;
    }

    public List<Blazor.Diagrams.Core.Geometry.Point> GetCirclePoints(int points, double radius, Blazor.Diagrams.Core.Geometry.Point center)
    {
        double slice = 2 * Math.PI / points;
        var pointsList = new List<Blazor.Diagrams.Core.Geometry.Point>();
        for (int i = 0; i < points; i++)
        {
            double angle = slice * i;
            int newX = (int)(center.X + radius * Math.Cos(angle));
            int newY = (int)(center.Y + radius * Math.Sin(angle));
            Blazor.Diagrams.Core.Geometry.Point p = new Blazor.Diagrams.Core.Geometry.Point(newX, newY);
            pointsList.Add(p);
        }
        return pointsList;
    }

 async void RunTimer()
    {
        while (await periodicTimer.WaitForNextTickAsync()) { 
            if (poller.nodes == null ||  poller.history == null || diagram == null)
                continue;

            if (diagram.Nodes.Count == 0) {
                Set_Diagram_Nodes();
                continue;
            }

            out_messages = poller.history.get_out_messages();
            foreach (LinkModel link in diagram.Links) {
                if (out_messages.Count(x => x.name == link.Id) == 0) {
                    link.Color = "#CCCCCC";
                }
                else 
                {
                    var out_message = out_messages.First(x => x.name == link.Id);
                    link.Color = get_spectrum_color(out_message.count);
                }
                link.Refresh();
            }

            StateHasChanged();           
        }     
    }
    private string get_spectrum_color(int value) {
        switch (value) {
            case < 5:                
                return "#575957";
            case < 15:                
                return "#567051";
            case < 45:                
                return "#55914b";
            case < 75:        
                return "#4aaf3a";
            case < 100:
                return "#3ec729";
            case >= 100 :
                return "#25ff00";
        }
    }

  
}
