@namespace NodeView.Pages 
@page "/nodes/networkview"
@inject HttpClient Http
@using Blazor.Diagrams.Components;
@using Blazor.Diagrams;
@using Blazor.Diagrams.Core.PathGenerators;
@using Blazor.Diagrams.Core.Routers;
@using Blazor.Diagrams.Options;
@using Blazor.Diagrams.Core.Models;   
@using Blazor.Diagrams.Core.Geometry;
@using Blazor.Diagrams.Core.Models.Base;
@using Blazor.Diagrams.Components.Widgets;
@using System.Net.Http.Json
@using SharedService;
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>Network Viewer</PageTitle>

<h1>Network Viewer</h1>

<NodeView.Components.NetworkState />

@if (nodes == null)
{
    <p><em>Loading Network Information...</em></p>
}
else
{
<div style="width: 60%;
    height: 700px;
    border: 1px solid black;">
    <CascadingValue Value="diagram" IsFixed="true">
        <DiagramCanvas>        
        </DiagramCanvas>
    </CascadingValue>
</div>

@if (history != null) {
    @foreach (ActiveActions actions in history.get_active_actions()) {
        @if (actions.ids != null && actions.ids.Count > 0) {
            <a>Nodes running @actions.action_name</a> <b>: @actions.ids.Count</b> 
            <b> ( @actions.ids.GroupBy(i => i).Count() unique ) </b>
         <br/>
        }
    }
}

}

@code {
    private LitContracts.Staking.ContractDefinition.Validator[]? nodes;
    private BlazorDiagram diagram { get; set; } = null!;
    PeriodicTimer periodicTimer = new (TimeSpan.FromMilliseconds(500));
    private List<Metric>? node_averages;
    private  NetworkHistory? history;
    protected override async Task OnInitializedAsync()
    {                
        var resolver = new Resolver(localStorage);
        var stakingService = await resolver.GetStakingService();
        
        var validators = await stakingService.GetValidatorsStructsInCurrentEpochQueryAsync();   
        nodes = validators.ReturnValue1.Select(x => new LitContracts.Staking.ContractDefinition.Validator
            {
                Ip = x.Ip,
                Ipv6 = x.Ipv6,
                NodeAddress = x.NodeAddress,
                Port = x.Port,
            }).ToArray();

        var options = new BlazorDiagramOptions
        {
            AllowMultiSelection = true,
            Zoom =
            {
                Enabled = false,
            },
            Links =
            {
                DefaultRouter = new NormalRouter(),
                DefaultPathGenerator = new SmoothPathGenerator()
            },
        };

        diagram = new BlazorDiagram(options);

        var center_point = new Blazor.Diagrams.Core.Geometry.Point(400, 400);
        var node_count = nodes.Length;
        var positions = GetCirclePoints(node_count, 300, center_point);
        
        @* var inner_positions = GetCirclePoints(node_count , 350, center_point);
        var outer_positions = GetCirclePoints(node_count , 450, center_point); *@

        for (int i = 0; i < node_count; i++)
        {
            var node = diagram.Nodes.Add(new NodeModel(id: i.ToString(), position: positions[i])
            {
                Title = "Node " + nodes[i].Port.ToString(),

            });

        }

        var center_node = diagram.Nodes.Add(new NodeModel(id: "request", center_point)
        {
            Title = "Request " 
        });


        for (int i = 0; i < node_count; i++)
        {
            for (int j = i; j < node_count; j++)
            {
                if (i == j)
                {
                    continue;
                }


                var link = diagram.Links.Add(new LinkModel(diagram.Nodes[i], diagram.Nodes[j]));                                 
                link.PathGenerator = new StraightPathGenerator();
                link.TargetMarker = LinkMarker.Arrow;


                var targetAnchor = new Blazor.Diagrams.Core.Anchors.LinkAnchor(link, 20, 10,10);
                var sourceAnchor = new Blazor.Diagrams.Core.Anchors.ShapeIntersectionAnchor(diagram.Nodes[j]  );
                var link2 = diagram.Links.Add(new LinkModel(sourceAnchor, targetAnchor));                                 
                @* var link2 = diagram.Links.Add(new LinkModel(diagram.Nodes[j], diagram.Nodes[i]));                                  *@
                link2.PathGenerator = new SmoothPathGenerator();                
                link2.TargetMarker = LinkMarker.Arrow;
                @* var outer_point = new Blazor.Diagrams.Core.Geometry.Point(x - 20 , y);
                link2.AddVertex( outer_point ); *@




                @* var x = (diagram.Nodes[j].Position.X + diagram.Nodes[i].Position.X) / 2;
                var y = (diagram.Nodes[j].Position.Y + diagram.Nodes[i].Position.Y) / 2;
                
                var s_x = (diagram.Nodes[j].Position.X - diagram.Nodes[i].Position.X) / (diagram.Nodes[j].Position.Y - diagram.Nodes[i].Position.Y);
                s_x = s_x * 10;
                var s_y = 10;


                var link = diagram.Links.Add(new LinkModel(diagram.Nodes[i], diagram.Nodes[j]));                                 
                link.PathGenerator = new SmoothPathGenerator();    
                link.TargetMarker = LinkMarker.Arrow;
                var inner_point = new Blazor.Diagrams.Core.Geometry.Point(x + 20, y);
                var vertex1 = link.AddVertex( inner_point );
                
            
                var link2 = diagram.Links.Add(new LinkModel(diagram.Nodes[j], diagram.Nodes[i]));                                 
                link2.PathGenerator = new SmoothPathGenerator();                
                link2.TargetMarker = LinkMarker.Arrow;
                var outer_point = new Blazor.Diagrams.Core.Geometry.Point(x - 20 , y);
                link2.AddVertex( outer_point );
  *@
            }
            var sourceNode3 = diagram.Nodes[i];
            var targetNode3 = center_node;
            var link3 = diagram.Links.Add(new LinkModel("request-" + i.ToString(), sourceNode3, targetNode3));             
            link3.PathGenerator = new StraightPathGenerator();         
            link3.Color="white";   
            link3.Width = 5;
        } 

            history = new NetworkHistory(5, nodes.Length);
        RunTimer();
    }

    public List<Blazor.Diagrams.Core.Geometry.Point> GetCirclePoints(int points, double radius, Blazor.Diagrams.Core.Geometry.Point center)
    {
        double slice = 2 * Math.PI / points;
        var pointsList = new List<Blazor.Diagrams.Core.Geometry.Point>();
        for (int i = 0; i < points; i++)
        {
            double angle = slice * i;
            int newX = (int)(center.X + radius * Math.Cos(angle));
            int newY = (int)(center.Y + radius * Math.Sin(angle));
            Blazor.Diagrams.Core.Geometry.Point p = new Blazor.Diagrams.Core.Geometry.Point(newX, newY);
            pointsList.Add(p);
        }
        return pointsList;
    }

 async void RunTimer()
    {
        while (await periodicTimer.WaitForNextTickAsync()) { 
            HttpClient client = new HttpClient();
            List<NodeMetricRoot> new_metrics = new List<NodeMetricRoot>();
            if(nodes != null) {
                foreach ( var node in nodes ) {
                    await client.GetAsync("http://localhost:" + node.Port.ToString() +  "/web/rt/metrics").ContinueWith(
                        (requestTask) =>
                        {
                            HttpResponseMessage response = requestTask.Result;
                            response.EnsureSuccessStatusCode();
                            return response.Content.ReadAsStringAsync();
                        }
                    ).Unwrap().ContinueWith(
                        (readTask) =>
                        {
                            var result = readTask.Result;                            
                            var current_metrics = System.Text.Json.JsonSerializer.Deserialize<NodeMetricRoot>(result);
                            if (current_metrics != null) {
                                new_metrics.Add(current_metrics);
                            }                            
                        }
                    );                    
                }
            }            
            history.add(new_metrics);
            @* var net_average = history.network_average(); *@
            node_averages = history.node_average();            
            foreach (NodeModel node in diagram.Nodes)
            {
                if (node.Id == "request") {
                    continue;
                }
                var id = int.Parse(node.Id);
                
                @* node.Title = node_averages[id].incoming + " / " + node_averages[id].outgoing; *@
                var message_count = node_averages[id].incoming + node_averages[id].outgoing; 
                
                
                foreach (LinkModel link in node.Links)
                {
                    if (link.Id.Contains("request")) {
                        link.Color = get_spectrum_color(message_count);
                        link.Refresh();
                    }
                }
            }

            StateHasChanged();           
        }    
    }

    private string get_spectrum_color(int value) {
        switch (value) {
            case < 20:
                return "#f7f7f7";
            case < 40:
                return "#d1fbd8";
            case < 70:
                return "#a3ee5b";
            case < 100:
                return "#66d855";
            case < 120:
                return "#40ba0f";
            case >= 120 :
                return "#188300";
            default:
                return "#f7f7f7";
        }
    }

    public void Dispose()
    {
        periodicTimer.Dispose(); 
    }  
}
