@namespace NodeView.Pages
@page "/nodes/nodemessaging"
@inject Services.Metrics.Poller poller
@using Services.Metrics.Models;

<PageTitle>LNE - Node Messaging</PageTitle>
<h2>Realtime Inter-Node Messaging</h2>
<NodeView.Components.Header />

<div class="container">
    <div class="row">
        <div class="col">
        @if (@node_averages != null) {
            <RadzenChart style="height: 700px">                 
                <RadzenStackedColumnSeries Data="@node_averages" CategoryProperty="node_name" Title="Incoming" LineType="LineType.Dashed" ValueProperty="inmsg">
                    <RadzenSeriesDataLabels Visible="true" />
                </RadzenStackedColumnSeries>
                <RadzenStackedColumnSeries Data="@node_averages" CategoryProperty="node_name" Title="Outgoing" ValueProperty="outmsg">
                    <RadzenSeriesDataLabels Visible="true" />
                </RadzenStackedColumnSeries>
                <RadzenValueAxis Min="0" Max="800" Step="100">
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="Messages/Second" />
                </RadzenValueAxis>
                <RadzenColumnOptions Radius="5" />
            </RadzenChart>
        }
        </div>
    </div>
</div>


@code {
    private List<Metric>? node_averages;
    PeriodicTimer periodicTimer = new (TimeSpan.FromMilliseconds(500));
    protected override Task OnInitializedAsync() {        
       RunTimer();
       
       return base.OnInitializedAsync();
    }

    public void Dispose()
    {        
        periodicTimer.Dispose();
    }
    async void RunTimer()
    {  
        while (await periodicTimer.WaitForNextTickAsync()) { 
            if (poller.history == null) {
                continue;
            }
            node_averages = poller.history.node_average();           
            StateHasChanged();           
        }    
    }
}
      