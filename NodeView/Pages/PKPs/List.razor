@page "/pkps/list"
@using Radzen.Blazor.Rendering;
@using SharedService;
@using LitContracts.PKPNFT;
@using LitContracts.Staking.ContractDefinition;
@using LitContracts.PubkeyRouter.ContractDefinition;
@using System.Numerics;
@using Nethereum.Hex.HexConvertors.Extensions;
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>PKPs</PageTitle>

<h2>Minted PKPs</h2>    

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="20" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
    Data="@pkps" TItem="SimplePKP" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>       
        <RadzenDataGridColumn TItem="SimplePKP" Property="Pubkey" Title="Public Key" Width="40%" />
        <RadzenDataGridColumn TItem="SimplePKP" Property="DerivedId" Title="Derived Id" Width="40%" />
        <RadzenDataGridColumn TItem="SimplePKP" Property="KeyType" Title="Key Type" Width="20%" />
    </Columns>
</RadzenDataGrid>  


@code {
    struct SimplePKP
    {
        public string Pubkey { get; set; }
        public string DerivedId { get; set; }
        public string KeyType { get; set; }
    }
    
    private List<SimplePKP> ? pkps = null;
    private BigInteger total_staked = 0;
    protected override async Task OnInitializedAsync()
    {                
        var resolver = new Resolver(localStorage);  


        PkpnftService? pkpnftService = null;
        
        try {
            pkpnftService = await resolver.GetPkpnftService();
        } catch (Exception e) {
            Console.WriteLine(e);
        } 

        if (pkpnftService == null) {
            return;
        }

        var pkpnftAddress = await resolver.GetContractAddress(ContractType.PKPNFT);
        var pubkeyRouterService = await resolver.GetPubkeyRouterService();
        var pubkeyRouterAddress = await resolver.GetContractAddress(ContractType.PubkeyRouter);
       
        var contract =  pkpnftService.ContractHandler.EthApiContractService;
        var contract2 = contract.ERC721.GetContractService(pkpnftAddress);
        var totalSupply = await contract2.TotalSupplyQueryAsync();
        pkps = new List<SimplePKP>();

        for (int i = 0; i < 10 ; i++ )
        {
            if (i >= totalSupply)
            {
                break;
            }
            var tokenId = await contract2.TokenByIndexQueryAsync(0);
            var a = await pubkeyRouterService.PubkeysQueryAsync(tokenId);
            var b = a.ReturnValue1;                
            pkps.Add(new SimplePKP{ Pubkey = b.Pubkey.ToHex(), DerivedId = b.DerivedKeyId.ToHex(), KeyType = "ECDSA" });
        }

    }
}