@page "/pkps/list"
@using Radzen.Blazor.Rendering;
@using SharedService;
@using LitContracts.Staking.ContractDefinition;
@using System.Numerics;

<PageTitle>PKPs</PageTitle>

<h2>Minted PKPs</h2>    

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="20" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
    Data="@current_validators" TItem="Validator" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>       
        <RadzenDataGridColumn TItem="Validator" Property="Ip" Title="ip" Width="10" />
        <RadzenDataGridColumn TItem="Validator" Property="Port" Title="port" Width="3" />
        <RadzenDataGridColumn TItem="Validator" Property="NodeAddress" Title="Node Wallet Address" Width="50" />
        <RadzenDataGridColumn TItem="Validator" Property="Reward" Title="Reward" Width="3"  />
        @* <RadzenDataGridColumn TItem="Validator" Property="SenderPubKey" Title="SenderPubKey"  />
        <RadzenDataGridColumn TItem="Validator" Property="ReceiverPubKey" Title="ReceiverPubKey"  /> *@
    </Columns>
</RadzenDataGrid>  


@code {

    
    private List<Validator> ? current_validators = null;
    private List<Validator> ? next_validators = null;
    private BigInteger total_staked = 0;
    protected override async Task OnInitializedAsync()
    {                
        var pubkeyRouterService = await Resolver.GetPubkeyRouterService();
        
    
    
        var stakingService = await Resolver.GetStakingService();

        var v = await stakingService.GetValidatorsStructsInCurrentEpochQueryAsync();
        current_validators = v.ReturnValue1;
        var v2 = await stakingService.GetValidatorsStructsInNextEpochQueryAsync();
        next_validators = v2.ReturnValue1;

        var stakingBalance = await Resolver.GetStakingBalancesService();

        total_staked = await stakingBalance.TotalStakedQueryAsync();

    }
}